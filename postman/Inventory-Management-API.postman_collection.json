{
  "info": {
    "name": "Inventory Management API",
    "description": "Complete API collection for Inventory Management System with authentication, user management, product management, sales, purchases, vendors, customers, and reporting endpoints.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "product_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "vendor_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "customer_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "purchase_order_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "sale_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "purchase_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running and healthy"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.token) {",
                  "        pm.collectionVariables.set('auth_token', response.data.token);",
                  "        pm.collectionVariables.set('user_id', response.data.user.id);",
                  "        console.log('Token saved:', response.data.token);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\",\n  \"rememberMe\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with username and password to get JWT token"
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "me"]
            },
            "description": "Get current authenticated user information"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "refresh"]
            },
            "description": "Refresh the current JWT token"
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"admin123\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "change-password"]
            },
            "description": "Change user password"
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout current user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users?page=1&limit=10&search=&role=",
              "host": ["{{base_url}}"],
              "path": ["api", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "role",
                  "value": ""
                }
              ]
            },
            "description": "Get all users with pagination and search"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            },
            "description": "Get specific user by ID"
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.user) {",
                  "        pm.collectionVariables.set('user_id', response.data.user._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\",\n  \"name\": \"Test User\",\n  \"email\": \"testuser@example.com\",\n  \"role\": \"staff\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Create a new user (Admin only)"
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test User\",\n  \"email\": \"updated@example.com\",\n  \"role\": \"manager\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            },
            "description": "Update user information (Admin only)"
          },
          "response": []
        },
        {
          "name": "Toggle User Status",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/toggle-status",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}", "toggle-status"]
            },
            "description": "Toggle user active/inactive status (Admin only)"
          },
          "response": []
        },
        {
          "name": "Get User Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "stats"]
            },
            "description": "Get user statistics (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            },
            "description": "Soft delete user (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products?page=1&limit=10&search=&category=&vendor=&lowStock=false",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "category",
                  "value": ""
                },
                {
                  "key": "vendor",
                  "value": ""
                },
                {
                  "key": "lowStock",
                  "value": "false"
                }
              ]
            },
            "description": "Get all products with pagination and filters"
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Get specific product by ID"
          },
          "response": []
        },
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.product) {",
                  "        pm.collectionVariables.set('product_id', response.data.product._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\",\n  \"sku\": \"TEST-001\",\n  \"purchaseRate\": 100,\n  \"salesRate\": 150,\n  \"currentStock\": 50,\n  \"category\": \"Electronics\",\n  \"vendor\": \"Test Vendor\",\n  \"description\": \"Test product description\",\n  \"minStockLevel\": 10\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            },
            "description": "Create a new product (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Product\",\n  \"purchaseRate\": 110,\n  \"salesRate\": 160,\n  \"description\": \"Updated product description\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Update product information (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Update Product Stock",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 10,\n  \"type\": \"add\",\n  \"reason\": \"Stock replenishment\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/stock",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "stock"]
            },
            "description": "Update product stock (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Get Product Categories",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "categories"]
            },
            "description": "Get all product categories"
          },
          "response": []
        },
        {
          "name": "Get Low Stock Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/low-stock",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "low-stock"]
            },
            "description": "Get products with low stock"
          },
          "response": []
        },
        {
          "name": "Bulk Update Products",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productIds\": [\"{{product_id}}\"],\n  \"updateData\": {\n    \"minStockLevel\": 15\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/bulk-update",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "bulk-update"]
            },
            "description": "Bulk update multiple products (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Soft delete product (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Vendors",
      "item": [
        {
          "name": "Get All Vendors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/vendors?page=1&limit=10&search=",
              "host": ["{{base_url}}"],
              "path": ["api", "vendors"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            },
            "description": "Get all vendors with pagination and search"
          },
          "response": []
        },
        {
          "name": "Get Vendor by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/vendors/{{vendor_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "vendors", "{{vendor_id}}"]
            },
            "description": "Get specific vendor by ID"
          },
          "response": []
        },
        {
          "name": "Create Vendor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.vendor) {",
                  "        pm.collectionVariables.set('vendor_id', response.data.vendor._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Vendor Inc.\",\n  \"contact\": \"John Doe\",\n  \"email\": \"contact@testvendor.com\",\n  \"phone\": \"+1-555-0123\",\n  \"address\": \"123 Vendor Street, City, State 12345\",\n  \"website\": \"https://testvendor.com\",\n  \"taxId\": \"TAX123456\",\n  \"paymentTerms\": \"Net 30\",\n  \"notes\": \"Reliable vendor for electronics\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/vendors",
              "host": ["{{base_url}}"],
              "path": ["api", "vendors"]
            },
            "description": "Create a new vendor (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Update Vendor",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Vendor Inc.\",\n  \"contact\": \"Jane Doe\",\n  \"phone\": \"+1-555-0124\",\n  \"paymentTerms\": \"Net 45\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/vendors/{{vendor_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "vendors", "{{vendor_id}}"]
            },
            "description": "Update vendor information (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Delete Vendor",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/vendors/{{vendor_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "vendors", "{{vendor_id}}"]
            },
            "description": "Soft delete vendor (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Customers",
      "item": [
        {
          "name": "Get All Customers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/customers?page=1&limit=10&search=",
              "host": ["{{base_url}}"],
              "path": ["api", "customers"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            },
            "description": "Get all customers with pagination and search"
          },
          "response": []
        },
        {
          "name": "Get Customer by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/customers/{{customer_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "customers", "{{customer_id}}"]
            },
            "description": "Get specific customer by ID"
          },
          "response": []
        },
        {
          "name": "Create Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.customer) {",
                  "        pm.collectionVariables.set('customer_id', response.data.customer._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Customer Corp\",\n  \"contact\": \"Alice Smith\",\n  \"email\": \"alice@testcustomer.com\",\n  \"phone\": \"+1-555-0201\",\n  \"address\": \"456 Customer Avenue, City, State 54321\",\n  \"company\": \"Test Customer Corporation\",\n  \"taxId\": \"CUST123456\",\n  \"creditLimit\": 10000,\n  \"notes\": \"Premium customer with good payment history\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "customers"]
            },
            "description": "Create a new customer"
          },
          "response": []
        },
        {
          "name": "Update Customer",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Customer Corp\",\n  \"contact\": \"Bob Smith\",\n  \"phone\": \"+1-555-0202\",\n  \"creditLimit\": 15000\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/customers/{{customer_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "customers", "{{customer_id}}"]
            },
            "description": "Update customer information"
          },
          "response": []
        },
        {
          "name": "Delete Customer",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/customers/{{customer_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "customers", "{{customer_id}}"]
            },
            "description": "Soft delete customer (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Purchase Orders",
      "item": [
        {
          "name": "Get All Purchase Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/purchase-orders?page=1&limit=10&status=&vendor=",
              "host": ["{{base_url}}"],
              "path": ["api", "purchase-orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": ""
                },
                {
                  "key": "vendor",
                  "value": ""
                }
              ]
            },
            "description": "Get all purchase orders with pagination and filters"
          },
          "response": []
        },
        {
          "name": "Get Purchase Order by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/purchase-orders/{{purchase_order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "purchase-orders", "{{purchase_order_id}}"]
            },
            "description": "Get specific purchase order by ID"
          },
          "response": []
        },
        {
          "name": "Create Purchase Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.purchaseOrder) {",
                  "        pm.collectionVariables.set('purchase_order_id', response.data.purchaseOrder._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vendor\": \"Test Vendor Inc.\",\n  \"expectedDeliveryDate\": \"2024-12-31\",\n  \"items\": [\n    {\n      \"productId\": \"{{product_id}}\",\n      \"productName\": \"Test Product\",\n      \"quantity\": 10,\n      \"unitPrice\": 100,\n      \"total\": 1000\n    }\n  ],\n  \"subtotal\": 1000,\n  \"tax\": 80,\n  \"total\": 1080,\n  \"notes\": \"Urgent order for Q4 inventory\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/purchase-orders",
              "host": ["{{base_url}}"],
              "path": ["api", "purchase-orders"]
            },
            "description": "Create a new purchase order (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Update Purchase Order",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"expectedDeliveryDate\": \"2024-12-25\",\n  \"notes\": \"Updated delivery date - expedited order\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/purchase-orders/{{purchase_order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "purchase-orders", "{{purchase_order_id}}"]
            },
            "description": "Update purchase order (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Update Purchase Order Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"approved\",\n  \"reason\": \"All items verified and budget approved\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/purchase-orders/{{purchase_order_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["api", "purchase-orders", "{{purchase_order_id}}", "status"]
            },
            "description": "Update purchase order status (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Delete Purchase Order",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/purchase-orders/{{purchase_order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "purchase-orders", "{{purchase_order_id}}"]
            },
            "description": "Soft delete purchase order (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sales",
      "item": [
        {
          "name": "Get All Sales",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/sales?page=1&limit=10&status=&customer=",
              "host": ["{{base_url}}"],
              "path": ["api", "sales"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": ""
                },
                {
                  "key": "customer",
                  "value": ""
                }
              ]
            },
            "description": "Get all sales with pagination and filters"
          },
          "response": []
        },
        {
          "name": "Get Sale by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/sales/{{sale_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "sales", "{{sale_id}}"]
            },
            "description": "Get specific sale by ID"
          },
          "response": []
        },
        {
          "name": "Create Sale",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.sale) {",
                  "        pm.collectionVariables.set('sale_id', response.data.sale._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerName\": \"Test Customer Corp\",\n  \"customerEmail\": \"alice@testcustomer.com\",\n  \"customerPhone\": \"+1-555-0201\",\n  \"items\": [\n    {\n      \"productId\": \"{{product_id}}\",\n      \"productName\": \"Test Product\",\n      \"quantity\": 5,\n      \"unitPrice\": 150,\n      \"total\": 750\n    }\n  ],\n  \"subtotal\": 750,\n  \"tax\": 60,\n  \"discount\": 50,\n  \"total\": 760,\n  \"paymentMethod\": \"card\",\n  \"notes\": \"Customer requested expedited shipping\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/sales",
              "host": ["{{base_url}}"],
              "path": ["api", "sales"]
            },
            "description": "Create a new sale"
          },
          "response": []
        },
        {
          "name": "Update Sale",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"paid\",\n  \"paymentMethod\": \"bank_transfer\",\n  \"notes\": \"Payment received via bank transfer\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/sales/{{sale_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "sales", "{{sale_id}}"]
            },
            "description": "Update sale information"
          },
          "response": []
        },
        {
          "name": "Delete Sale",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/sales/{{sale_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "sales", "{{sale_id}}"]
            },
            "description": "Soft delete sale (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Purchases",
      "item": [
        {
          "name": "Get All Purchases",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/purchases?page=1&limit=10&vendor=",
              "host": ["{{base_url}}"],
              "path": ["api", "purchases"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "vendor",
                  "value": ""
                }
              ]
            },
            "description": "Get all purchases with pagination and filters"
          },
          "response": []
        },
        {
          "name": "Get Purchase by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/purchases/{{purchase_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "purchases", "{{purchase_id}}"]
            },
            "description": "Get specific purchase by ID"
          },
          "response": []
        },
        {
          "name": "Create Purchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.purchase) {",
                  "        pm.collectionVariables.set('purchase_id', response.data.purchase._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vendor\": \"Test Vendor Inc.\",\n  \"items\": [\n    {\n      \"productId\": \"{{product_id}}\",\n      \"productName\": \"Test Product\",\n      \"quantity\": 20,\n      \"unitPrice\": 100,\n      \"total\": 2000\n    }\n  ],\n  \"subtotal\": 2000,\n  \"tax\": 160,\n  \"total\": 2160,\n  \"invoiceFile\": \"invoice-test-001.pdf\",\n  \"notes\": \"Bulk purchase for inventory replenishment\",\n  \"relatedPO\": \"{{purchase_order_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/purchases",
              "host": ["{{base_url}}"],
              "path": ["api", "purchases"]
            },
            "description": "Create a new purchase (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Update Purchase",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invoiceFile\": \"invoice-test-001-updated.pdf\",\n  \"notes\": \"Updated invoice file with corrected amounts\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/purchases/{{purchase_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "purchases", "{{purchase_id}}"]
            },
            "description": "Update purchase information (Admin/Manager only)"
          },
          "response": []
        },
        {
          "name": "Delete Purchase",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/purchases/{{purchase_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "purchases", "{{purchase_id}}"]
            },
            "description": "Soft delete purchase (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Reports",
      "item": [
        {
          "name": "Dashboard Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/reports/dashboard",
              "host": ["{{base_url}}"],
              "path": ["api", "reports", "dashboard"]
            },
            "description": "Get dashboard summary with key metrics"
          },
          "response": []
        },
        {
          "name": "Sales Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/reports/sales?startDate=2024-01-01&endDate=2024-12-31&groupBy=month",
              "host": ["{{base_url}}"],
              "path": ["api", "reports", "sales"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                },
                {
                  "key": "groupBy",
                  "value": "month"
                }
              ]
            },
            "description": "Get sales report with date range and grouping"
          },
          "response": []
        },
        {
          "name": "Purchase Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/reports/purchases?startDate=2024-01-01&endDate=2024-12-31&groupBy=month",
              "host": ["{{base_url}}"],
              "path": ["api", "reports", "purchases"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                },
                {
                  "key": "groupBy",
                  "value": "month"
                }
              ]
            },
            "description": "Get purchase report with date range and grouping"
          },
          "response": []
        },
        {
          "name": "Inventory Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/reports/inventory?category=&lowStock=false",
              "host": ["{{base_url}}"],
              "path": ["api", "reports", "inventory"],
              "query": [
                {
                  "key": "category",
                  "value": ""
                },
                {
                  "key": "lowStock",
                  "value": "false"
                }
              ]
            },
            "description": "Get inventory report with category filter"
          },
          "response": []
        },
        {
          "name": "Profit & Loss Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/reports/profit-loss?startDate=2024-01-01&endDate=2024-12-31",
              "host": ["{{base_url}}"],
              "path": ["api", "reports", "profit-loss"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ]
            },
            "description": "Get profit and loss report for date range"
          },
          "response": []
        },
        {
          "name": "Top Products Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/reports/top-products?limit=10&sortBy=revenue",
              "host": ["{{base_url}}"],
              "path": ["api", "reports", "top-products"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "sortBy",
                  "value": "revenue"
                }
              ]
            },
            "description": "Get top performing products report"
          },
          "response": []
        },
        {
          "name": "Vendor Performance Report",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/reports/vendor-performance?startDate=2024-01-01&endDate=2024-12-31",
              "host": ["{{base_url}}"],
              "path": ["api", "reports", "vendor-performance"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ]
            },
            "description": "Get vendor performance report"
          },
          "response": []
        }
      ]
    },
    {
      "name": "API Documentation",
      "item": [
        {
          "name": "Swagger Documentation",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api-docs",
              "host": ["{{base_url}}"],
              "path": ["api-docs"]
            },
            "description": "Access Swagger API documentation"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set base URL if not already set",
          "if (!pm.collectionVariables.get('base_url')) {",
          "    pm.collectionVariables.set('base_url', 'http://localhost:5000');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for all requests",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    if (pm.response.code !== 404) {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('success');",
          "    }",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.json());",
          "}"
        ]
      }
    }
  ]
}
